from django.test import TestCase

# Create your tests here.

from django.test import TestCase
from rest_framework.test import APIClient
from django.contrib.auth import get_user_model
User=get_user_model()
# Unit tests for projects portion
class UserTestCase(TestCase):
    #set up data
    def setup(self):
        print("Setting Up\n")
        print("Setting Up.\n")
        print("Setting Up..\n")
        print("Setting Up...\n")
        #Logs in real generic user accounts
        self.student_user = APIClient()
        self.student_user.login(username='teststudent',password='test1234')

    #NOTE: The structure for these tests has nothing to do with roles or ranks, we are relying solely on the PERMISSIONS being attached to the request
        #Permissions Are:
    #       1. Create Project
    #       2. Modify existing project
    #       3. Create a role
    #       4. Assign a role
    #We identify each permission in a unique tag in the permissions portion of the request body
        #So any role will be defined by which of these permissions it has
    #EXAMPLE Permissions objects
    #{
    #  permissions:{
    #    pod:{
    #        create:True,
    #        modify:True
    #    },
    #    project:{
    #        create:True,
    #        modify:True
    #    }
    #  }
    #}
    ##Project attributes

    #DELETE /api/project/{pk}/ to remove the project
    #require modify project permission

    #GET /api/projects/ Should get a list of projects from an authenticated request
    def test_getProject(self):  #No added permissions required, get works on a logged in user
        print(self)
        resp = self.student_user.get('/api/project/')
        self.assertEqual(resp.status_code,200)


    # PATCH /api/project/{pk}/ to update a project
    # PUT /api/project/{pk}/ to update a project
    #Should send a positive response when it gets an authenticated update







    ## Project Role types

    #GET from /api/project/roletype/ a full list of role types




    #GET /api/project/roletype/{pk} the single pk record





    ## Project Roles

    #POST to /api/project/projectrole/ and create a role with a given project_id (only for pod managers)





    #GET to /api/project/projectroles/ and return a whole  list assigned to user




    #GET /api/project/projectroles/ with a project_id and return a single object





    #PATCH /api/project/projectrole/{pk} modify a specific project role




    #DELETE /api/project/projectrole/{pk} remove a project


    ## Project Places

    # POST /api/project/place/ to create a new place within project_role_id

    #GET /api/project/places/ return places for a user with no arguments
    #GET /api/project/places/ takes project_id and returns places for the project
    #GET /api/project/places/ takes project_role_id give the places for that id

    #PATCH /api/project/place/{pk} modify a specific rpoject place
    #DELETE /api/project/place/{pk} don't delete the project place, but do mark it as disabled
