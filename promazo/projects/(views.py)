from django.shortcuts import render
from .models import *

from rest_framework import serializers
#from .serializers import *

from rest_framework import generics
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

#Getting a project list
    #Get
class listProjects(APIView):
    def __getList__(self,request):
        proj_recs = projects.objects.all()
        reurn_data=[]
        for items in proj_recs:
            return_data.append({'project':item})
        #ser=ProjectsSerializer(return_data,many=True)
    def get(self,request,format=None):
        return Response(self.__getList__(request))

    #POST
class modifyProject(APIView):
    permission_classes = (IsAuthenticated)
    def post(self,request,format=None):
        for items in request.data['projects']:
            proj = projects.objects.get(id=items)
            if not projects.objects.filter(project=proj,user=request.user):
                newproj = projects.objects.create(project=proj,user=request.user)
        return Response(self.__getList__(request))

#Get all role Types
class roleList(APIView):
    def __getList__(self,request):
        proj_recs = projectRoleTypes.objects.all()
        reurn_data=[]
        for items in proj_recs:
            return_data.append({'roleType':item})
        #ser=ProjectsSerializer(return_data,many=True)
    def get(self,request,format=None):
        return Response(self.__getList__(request))
#get one role from all the roles
class getRole(APIView,name):
    def __getObj__(self,request):
        type_recs = projectRoleTypes.objects.filter(name=name)
    def get(self,request,format=None):
        return Response(self.__getObj__(request))
#Create a new role
    #POST
class newProjectRole(APIView):

    def post(self,request,format=None):
        #TODO check for authen
        #TODO check for existance
        newRole = projectRoles.objects.create(name=requests.data['name'],
                                                roleType = requests.data['type'],
                                                numHours = requests.data['hours'])
        ser=projectRoleSerializer(projectRoles.objects.filter(user=request.user),many=True)

    #Get
class getProjectRole(APIView):
    serializer_class = getProjectRoleSerializer
    #TODO get better
    def get_role(self):
        return projectRoles.objects.filter(name=self.request.name)

#list all the porjects
class listProjectRoles(APIView):
    def __getList__(self,request):
        proj_role_recs = projects.objects.all()
        reurn_data=[]
        for items in proj_role_recs:
            return_data.append({'project':item})
        #ser=ProjectsSerializer(return_data,many=True)
    def get(self,request,format=None):
        return Response(self.__getList__(request))
#Create a new project polace
    #POST - create new place
class newPlaces(APIView):
    #TODO add authen permission_classes = (IsAuthenticated)
    def post(self,request,format=None):
        for items in request.data['project_places']:
            place = projectPlaces.objects.get(id=items)
            if not projectPlaces.objects.filter(project=proj,user=request.user):
                newproj = projectPlaces.objects.create(project=place,user=request.user)
        return Response(self.__getList__(request))
#Get a place with a given id
    #PUT modify a place
    #DELETE mark the record as disabled
class modifyProjectPlace(APIView):
    #TODO check authen
    def put(self,request,format=None):
    '''
    args
        projectRole
        userStartDate
        endDate
        status
        numHours
        notes

    '''
        places=request.data['places']
        ser=UserModelSerializer(request.user,data=request.data,partial=True)

        if ser.is_valid():
            ser.save()
            #login(request, user)
            return Response(ser.data)
        else:
            return Response(ser.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self,request,format=None):
        place = response.data['place']
        #check existance
        if projectPlaces.objects.filter(project=place,user=request.user):
            #TODO define mode of updating status
            #place.status =
        #TODO Deliver response return Response(self.__getList__(request))

#Get a list of places
    #no arguments => places for a user
    #project_id => get all places for a project
    #project_role_id => give places for that id
class listPlaces(APIView):
    def __getUserPlacesList__(self,request):
        places = projectPlaces.objects.filter(user=request.user)
    def __getProjectPlacesList__(self,request):
        places = projectPlaces.objects.filter(project=request.project)
    def __getRolePlacesList__(self,request):
        places = projectPlaces.objects.filter(projectRole=request.role)
    def get(self,request,format=None):
        if (project in request):
            return(self.__getProjectPlacesList__(places))
        elif (role in request):
            return(self.__getRolePlacesList__(places))
        else:
            return(self.__getUserPlacesList__(places))
